# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jKJdwvghovF2fr7QBwB4c3_l4wHM3O73
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
from sklearn.preprocessing import StandardScaler, LabelEncoder
import plotly.express as px
import plotly.graph_objects as go
import io

# Konfigurasi halaman
st.set_page_config(
    page_title="Prediksi Hasil Panen",
    page_icon="üåæ",
    layout="wide"
)

# Load model
@st.cache_resource
def load_trained_model():
    try:
        with open('final_woa_rf_model.pkl', 'rb') as f:
            model_data = pickle.load(f)
        return model_data
    except FileNotFoundError:
        st.error("‚ùå File model tidak ditemukan! Pastikan final_woa_rf_model.pkl ada di folder yang sama.")
        return None
    except Exception as e:
        st.error(f"‚ùå Error loading model: {str(e)}")
        return None

def preprocess_single_input(tahun, bulan, luas_panen):
    """Preprocessing untuk input tunggal"""
    # Buat DataFrame
    df = pd.DataFrame({
        'Tahun': [tahun],
        'Bulan': [bulan],
        'Luas Panen/ha': [luas_panen]
    })

    # Feature engineering
    df['season'] = df['Bulan'].apply(lambda x: 'dry' if x in [6,7,8,9] else 'wet')
    df['quarter'] = (df['Bulan'] - 1) // 3 + 1

    # Encode season
    le = LabelEncoder()
    df['season_encoded'] = le.fit_transform(df['season'])

    # Drop season column (keep encoded)
    df = df.drop(['season'], axis=1)

    return df

def preprocess_batch_data(df):
    """Preprocessing untuk batch data"""
    df_processed = df.copy()

    # Feature engineering
    df_processed['season'] = df_processed['Bulan'].apply(lambda x: 'dry' if x in [6,7,8,9] else 'wet')
    df_processed['quarter'] = (df_processed['Bulan'] - 1) // 3 + 1

    # Encode season
    le = LabelEncoder()
    df_processed['season_encoded'] = le.fit_transform(df_processed['season'])

    return df_processed

def make_prediction(processed_data, model_data):
    """Membuat prediksi menggunakan model yang sudah di-train"""
    if model_data is None:
        # Fallback prediction jika model tidak ada
        return np.random.uniform(50, 200, len(processed_data))

    try:
        model = model_data['model']
        scaler = model_data['scaler']

        # Siapkan features untuk prediksi
        feature_cols = ['Tahun', 'Bulan', 'Luas Panen/ha', 'quarter', 'season_encoded']
        X = processed_data[feature_cols]

        # Scale features
        X_scaled = scaler.transform(X)

        # Prediksi
        predictions = model.predict(X_scaled)
        return predictions

    except Exception as e:
        st.error(f"Error dalam prediksi: {str(e)}")
        return np.random.uniform(50, 200, len(processed_data))

# Load model
model_data = load_trained_model()

# Main App
st.title("üåæ Sistem Prediksi Hasil Panen")
st.markdown("Sistem prediksi menggunakan Random Forest + Whale Optimization Algorithm")

if model_data:
    st.success("‚úÖ Model berhasil dimuat!")
    # Tampilkan info model
    with st.expander("‚ÑπÔ∏è Informasi Model"):
        st.write("**Parameter Model:**")
        for key, value in model_data['best_params'].items():
            st.write(f"- {key}: {value}")

        st.write("**Metrik Performance:**")
        for metric, value in model_data['test_metrics'].items():
            st.write(f"- {metric}: {value:.4f}")
else:
    st.warning("‚ö†Ô∏è Model tidak dapat dimuat. Menggunakan prediksi demo.")

st.markdown("---")

# Sidebar untuk pilihan input
st.sidebar.header("üîß Pilihan Input")
input_method = st.sidebar.radio(
    "Pilih metode input:",
    ["Manual Input", "Upload CSV File"]
)

if input_method == "Manual Input":
    # MANUAL INPUT
    col1, col2 = st.columns([1, 2])

    with col1:
        st.subheader("üìù Input Manual")

        with st.form("manual_prediction"):
            tahun = st.number_input("Tahun", min_value=2020, max_value=2030, value=2024)
            bulan = st.selectbox(
                "Bulan",
                list(range(1, 13)),
                format_func=lambda x: f"{x:02d} - {['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'][x-1]}"
            )
            luas_panen = st.number_input("Luas Panen (ha)", min_value=0.0, value=100.0, step=0.1)

            submit_button = st.form_submit_button("üîÆ Prediksi Hasil Panen", type="primary")

        if submit_button:
            # Preprocess input
            processed_input = preprocess_single_input(tahun, bulan, luas_panen)

            # Make prediction
            prediction = make_prediction(processed_input, model_data)[0]

            # Store in session state
            st.session_state['prediction'] = prediction
            st.session_state['input_data'] = {
                'Tahun': tahun,
                'Bulan': bulan,
                'Luas Panen': luas_panen,
                'Musim': 'Kering' if bulan in [6,7,8,9] else 'Basah'
            }

    with col2:
        st.subheader("üìä Hasil Prediksi")

        if 'prediction' in st.session_state:
            prediction = st.session_state['prediction']
            input_info = st.session_state['input_data']

            # Display prediction
            st.success(f"**Prediksi Hasil Panen: {prediction:.2f} ton**")

            # Info cards
            col2_1, col2_2 = st.columns(2)
            with col2_1:
                st.info(f"üìÖ **Periode:** {input_info['Bulan']:02d}/{input_info['Tahun']}")
                st.info(f"üåø **Musim:** {input_info['Musim']}")
            with col2_2:
                st.info(f"üìè **Luas Panen:** {input_info['Luas Panen']} ha")
                productivity = prediction / input_info['Luas Panen']
                st.info(f"‚ö° **Produktivitas:** {productivity:.2f} ton/ha")

            # Gauge chart
            fig = go.Figure(go.Indicator(
                mode = "gauge+number",
                value = prediction,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': "Hasil Panen (ton)"},
                gauge = {
                    'axis': {'range': [None, 300]},
                    'bar': {'color': "darkgreen"},
                    'steps': [
                        {'range': [0, 100], 'color': "lightgray"},
                        {'range': [100, 200], 'color': "yellow"},
                        {'range': [200, 300], 'color': "green"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': 250
                    }
                }
            ))
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)

else:
    # CSV UPLOAD
    st.subheader("üìÅ Upload File CSV")

    # Template section
    with st.expander("üìã Lihat Format Template"):
        template_df = pd.DataFrame({
            'Tahun': [2023, 2023, 2024, 2024],
            'Bulan': [1, 6, 3, 8],
            'Luas Panen/ha': [150.5, 200.0, 175.8, 180.2]
        })
        st.dataframe(template_df)

        # Download template
        csv_template = template_df.to_csv(index=False)
        st.download_button(
            "‚¨áÔ∏è Download Template CSV",
            csv_template,
            "template_prediksi_panen.csv",
            "text/csv"
        )

    # File uploader
    uploaded_file = st.file_uploader(
        "Pilih file CSV",
        type=['csv'],
        help="Upload file CSV dengan kolom: Tahun, Bulan, Luas Panen/ha"
    )

    if uploaded_file is not None:
        try:
            # Read CSV
            df = pd.read_csv(uploaded_file)

            # Validate columns
            required_cols = ['Tahun', 'Bulan', 'Luas Panen/ha']
            missing_cols = [col for col in required_cols if col not in df.columns]

            if missing_cols:
                st.error(f"‚ùå Kolom yang hilang: {missing_cols}")
            else:
                st.success(f"‚úÖ File berhasil dimuat! {len(df)} baris data")

                # Show data preview
                st.subheader("üëÄ Preview Data")
                st.dataframe(df.head(10))

                # Batch prediction button
                if st.button("üöÄ Jalankan Prediksi Batch", type="primary"):
                    with st.spinner("Memproses prediksi..."):
                        # Preprocess
                        processed_df = preprocess_batch_data(df)

                        # Predict
                        predictions = make_prediction(processed_df, model_data)

                        # Add results to dataframe
                        result_df = df.copy()
                        result_df['Prediksi Hasil Panen (ton)'] = predictions
                        result_df['Musim'] = processed_df['season'].map({'dry': 'Kering', 'wet': 'Basah'})
                        result_df['Produktivitas (ton/ha)'] = predictions / df['Luas Panen/ha']

                    st.success("‚úÖ Prediksi selesai!")

                    # Display results
                    tab1, tab2, tab3 = st.tabs(["üìä Hasil", "üìà Visualisasi", "üì• Download"])

                    with tab1:
                        st.dataframe(result_df)

                        # Summary
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.metric("Total Prediksi", f"{predictions.sum():.1f} ton")
                        with col2:
                            st.metric("Rata-rata", f"{predictions.mean():.1f} ton/periode")
                        with col3:
                            st.metric("Tertinggi", f"{predictions.max():.1f} ton")
                        with col4:
                            st.metric("Terendah", f"{predictions.min():.1f} ton")

                    with tab2:
                        # Time series
                        fig1 = px.line(result_df, x='Bulan', y='Prediksi Hasil Panen (ton)',
                                      color='Tahun', title="Prediksi Hasil Panen per Bulan")
                        st.plotly_chart(fig1, use_container_width=True)

                        # Seasonal comparison
                        seasonal_avg = result_df.groupby('Musim')['Prediksi Hasil Panen (ton)'].mean().reset_index()
                        fig2 = px.bar(seasonal_avg, x='Musim', y='Prediksi Hasil Panen (ton)',
                                     title="Rata-rata Prediksi per Musim")
                        st.plotly_chart(fig2, use_container_width=True)

                    with tab3:
                        # Download results
                        csv_result = result_df.to_csv(index=False)
                        st.download_button(
                            "üì• Download Hasil (CSV)",
                            csv_result,
                            f"hasil_prediksi_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            "text/csv"
                        )

        except Exception as e:
            st.error(f"‚ùå Error membaca file: {str(e)}")

# Sidebar info
st.sidebar.markdown("---")
st.sidebar.subheader("‚ÑπÔ∏è Tentang Model")
st.sidebar.info("""
**Algoritma:**
- Random Forest Regressor
- Whale Optimization Algorithm

**Input Features:**
- Tahun
- Bulan
- Luas Panen (ha)
- Musim (auto-generated)
- Kuartal (auto-generated)

**Output:**
- Prediksi Hasil Panen (ton)
""")